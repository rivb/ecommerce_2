"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _apiHandler = _interopRequireWildcard(require("./api-handler"));

/* global Cypress cy */
Cypress.Commands.add(`getTestElement`, (selector, options = {}) => cy.get(`[data-testid="${selector}"]`, options));
const TIMEOUT = 10000;
Cypress.Commands.add(`waitForAPI`, {
  prevSubject: `optional`
}, (subject, api, {
  timeout = TIMEOUT
} = {}) => {
  Cypress.log({
    name: `waitForAPI`,
    message: api
  });
  cy.window({
    log: false
  }).then({
    timeout: timeout
  }, win => {
    if (!win.___apiHandler) {
      win.___apiHandler = _apiHandler.default.bind(win);
    }

    return _apiHandler.waitForAPI.call(win, api).then(() => subject);
  });
});
Cypress.Commands.add(`waitForAPIorTimeout`, {
  prevSubject: `optional`
}, (subject, api, {
  timeout = TIMEOUT
} = {}) => {
  cy.window().then({
    timeout: timeout + 1000
  }, win => {
    if (!win.___apiHandler) {
      win.___apiHandler = _apiHandler.default.bind(win);
    }

    return Promise.race([_apiHandler.waitForAPI.call(win, api).then(() => subject), new Promise(resolve => {
      setTimeout(resolve, timeout);
    })]);
  });
});
Cypress.Commands.add(`waitForRouteChange`, {
  prevSubject: `optional`
}, subject => cy.waitForAPI(`onRouteUpdate`).then(() => subject));