"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cross_fetch_1 = require("cross-fetch");
var utils_1 = require("./utils");
var utils_2 = require("./utils");
exports.createCartIdentifier = utils_2.createCartIdentifier;
var MoltinClient = /** @class */ (function () {
    function MoltinClient(options) {
        var client_id = options.client_id, client_secret = options.client_secret, storage = options.storage, others = __rest(options, ["client_id", "client_secret", "storage"]);
        this.client_id = client_id;
        this.client_secret = client_secret ? client_secret : undefined;
        this.storage = storage;
        this.fetch = options.fetch ? options.fetch : cross_fetch_1.default;
        this.options = __assign({ host: options.host ? options.host : 'https://api.moltin.com', version: options.version ? options.version : 'v2' }, others);
    }
    MoltinClient.prototype.request = function (method, path, data, requestHeaders) {
        if (data === void 0) { data = undefined; }
        if (requestHeaders === void 0) { requestHeaders = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, client_id, storage, _b, application, currency, customer_token, host, version, classHeaders, uri, customHeaders, credentials, access_token, _c, headers, body, response, json;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this, client_id = _a.client_id, storage = _a.storage, _b = _a.options, application = _b.application, currency = _b.currency, customer_token = _b.customer_token, host = _b.host, version = _b.version, classHeaders = _b.headers;
                        uri = host + "/" + version + "/" + utils_1.removeLeadingSlash(path);
                        customHeaders = __assign({}, classHeaders, requestHeaders);
                        if (!storage) return [3 /*break*/, 2];
                        return [4 /*yield*/, JSON.parse(storage.get('moltinCredentials'))];
                    case 1:
                        credentials = _d.sent();
                        _d.label = 2;
                    case 2:
                        if (!(!credentials ||
                            !credentials.access_token ||
                            credentials.client_id !== client_id ||
                            Math.floor(Date.now() / 1000) >= credentials.expires)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.authenticate()];
                    case 3:
                        _c = _d.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _c = credentials.access_token;
                        _d.label = 5;
                    case 5:
                        access_token = _c;
                        headers = __assign({ 'Content-Type': 'application/json', 'X-MOLTIN-SDK-LANGUAGE': 'JS-REQUEST', Authorization: "Bearer " + access_token }, (application && { 'X-MOLTIN-APPLICATION': application }), (currency && { 'X-MOLTIN-CURRENCY': currency }), (customer_token && { 'X-MOLTIN-CUSTOMER-TOKEN': customer_token }), customHeaders);
                        body = customHeaders['Content-Type']
                            ? data
                            : { body: JSON.stringify({ data: data }) };
                        return [4 /*yield*/, this.fetch(uri, __assign({ method: method,
                                headers: headers }, (data && body)))];
                    case 6:
                        response = _d.sent();
                        if (response.status === 204)
                            return [2 /*return*/, response.text()];
                        return [4 /*yield*/, response.json()];
                    case 7:
                        json = _d.sent();
                        if (!response.ok) {
                            throw __assign({ statusCode: response.status }, json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    MoltinClient.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, client_id, client_secret, storage, host, uri, body, response, _b, access_token, expires, credentials;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this, client_id = _a.client_id, client_secret = _a.client_secret, storage = _a.storage, host = _a.options.host;
                        if (!client_id) {
                            throw new Error('You must provide a client_id');
                        }
                        uri = host + "/oauth/access_token";
                        body = __assign({ grant_type: client_secret ? 'client_credentials' : 'implicit', client_id: client_id }, (client_secret && { client_secret: client_secret }));
                        return [4 /*yield*/, this.fetch(uri, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'X-MOLTIN-SDK-LANGUAGE': 'JS-REQUEST'
                                },
                                body: Object.keys(body)
                                    .map(function (k) { return encodeURIComponent(k) + "=" + encodeURIComponent(body[k]); })
                                    .join('&')
                            })];
                    case 1:
                        response = _c.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        _b = _c.sent(), access_token = _b.access_token, expires = _b.expires;
                        if (!access_token) {
                            throw new Error('Unable to obtain an access token');
                        }
                        if (!storage) return [3 /*break*/, 4];
                        credentials = {
                            client_id: client_id,
                            access_token: access_token,
                            expires: expires
                        };
                        return [4 /*yield*/, storage.set('moltinCredentials', JSON.stringify(credentials))];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [2 /*return*/, access_token];
                }
            });
        });
    };
    MoltinClient.prototype.post = function (path, data, headers) {
        return this.request('POST', path, data, headers);
    };
    MoltinClient.prototype.get = function (path, headers) {
        return this.request('GET', path, undefined, headers);
    };
    MoltinClient.prototype.put = function (path, data, headers) {
        return this.request('PUT', path, data, headers);
    };
    MoltinClient.prototype.delete = function (path, data, headers) {
        return this.request('DELETE', path, data, headers);
    };
    return MoltinClient;
}());
exports.MoltinClient = MoltinClient;
//# sourceMappingURL=index.js.map